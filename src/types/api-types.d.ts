/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ActivityBasicDto: {
            /** Format: double */
            id: number;
            /** Format: double */
            userId: number;
            title: string;
            description: string;
            category: string;
            /** Format: double */
            price: number;
            address: string;
            bannerImageUrl: string;
            /** Format: double */
            rating: number;
            /** Format: double */
            reviewCount: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        ErrorResponsePayload: {
            message: string;
        };
        /** @enum {string} */
        Method: "offset" | "cursor";
        /** @enum {string} */
        Category: "문화 · 예술" | "식음료" | "스포츠" | "투어" | "관광" | "웰빙";
        /** @enum {string} */
        Sort: "most_reviewed" | "price_asc" | "price_desc" | "latest";
        FindActivitiesQueryDto: {
            method: components["schemas"]["Method"];
            /** Format: double */
            cursorId?: number;
            category?: components["schemas"]["Category"];
            keyword?: string;
            sort?: components["schemas"]["Sort"];
            /**
             * Format: double
             * @default 1
             */
            page: number;
            /**
             * Format: double
             * @default 20
             */
            size: number;
        };
        /** @example {
         *       "id": 7,
         *       "userId": 21,
         *       "title": "함께 배우면 즐거운 스트릿댄스",
         *       "description": "둠칫 둠칫 두둠칫",
         *       "category": "투어",
         *       "price": 10000,
         *       "address": "서울특별시 강남구 테헤란로 427",
         *       "bannerImageUrl": "https://sprint-fe-project.s3.ap-northeast-2.amazonaws.com/globalnomad/activity_registration_image/a.png",
         *       "subImages": [
         *         {
         *           "id": 1,
         *           "imageUrl": "https://sprint-fe-project.s3.ap-northeast-2.amazonaws.com/globalnomad/activity_registration_image/b.png"
         *         }
         *       ],
         *       "schedules": [
         *         {
         *           "id": 1,
         *           "date": "2023-12-01",
         *           "startTime": "12:00",
         *           "endTime": "13:00"
         *         },
         *         {
         *           "id": 2,
         *           "date": "2023-12-05",
         *           "startTime": "12:00",
         *           "endTime": "13:00"
         *         }
         *       ],
         *       "reviewCount": 5,
         *       "rating": 4.74,
         *       "createdAt": "2023-12-31T21:28:50.589Z",
         *       "updatedAt": "2023-12-31T21:28:50.589Z"
         *     } */
        ActivityWithSubImagesAndSchedulesDto: {
            /** Format: double */
            id: number;
            /** Format: double */
            userId: number;
            title: string;
            description: string;
            category: string;
            /** Format: double */
            price: number;
            address: string;
            bannerImageUrl: string;
            /** Format: double */
            rating: number;
            /** Format: double */
            reviewCount: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            subImages: {
                imageUrl: string;
                /** Format: double */
                id: number;
            }[];
            schedules: {
                endTime: string;
                startTime: string;
                date: string;
                /** Format: double */
                id: number;
            }[];
        };
        ScheduleResponseDto: {
            date: string;
            times: {
                endTime: string;
                startTime: string;
                /** Format: double */
                id: number;
            }[];
        };
        FindAvailableScheduleQueryDto: {
            /** @example 2024 */
            year: string;
            /** @example 01 */
            month: string;
        };
        ReviewServiceResponseDto: {
            /** Format: double */
            id: number;
            user: {
                profileImageUrl: string | null;
                nickname: string;
                /** Format: double */
                id: number;
            };
            /** Format: double */
            activityId: number;
            /** Format: double */
            rating: number;
            content: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        FindReviewsQueryDto: {
            /**
             * Format: double
             * @default 1
             */
            page: number;
            /**
             * Format: double
             * @default 3
             */
            size: number;
        };
        ActivityWithSchedulesResponseDto: {
            /** Format: double */
            id: number;
            /** Format: double */
            userId: number;
            title: string;
            description: string;
            category: string;
            /** Format: double */
            price: number;
            address: string;
            bannerImageUrl: string;
            /** Format: double */
            rating: number;
            /** Format: double */
            reviewCount: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            subImages: {
                imageUrl: string;
                /** Format: double */
                id: number;
            }[];
            schedules: {
                times: {
                    endTime: string;
                    startTime: string;
                    /** Format: double */
                    id: number;
                }[];
                date: string;
            }[];
        };
        CreateScheduleBody: {
            date: string;
            startTime: string;
            endTime: string;
        };
        /** @example {
         *       "title": "함께 배우면 즐거운 스트릿댄스",
         *       "category": "투어",
         *       "description": "둠칫 둠칫 두둠칫",
         *       "address": "서울특별시 강남구 테헤란로 427",
         *       "price": 10000,
         *       "schedules": [
         *         {
         *           "date": "2023-12-01",
         *           "startTime": "12:00",
         *           "endTime": "13:00"
         *         },
         *         {
         *           "date": "2023-12-05",
         *           "startTime": "12:00",
         *           "endTime": "13:00"
         *         },
         *         {
         *           "date": "2023-12-05",
         *           "startTime": "13:00",
         *           "endTime": "14:00"
         *         },
         *         {
         *           "date": "2023-12-05",
         *           "startTime": "14:00",
         *           "endTime": "15:00"
         *         }
         *       ],
         *       "bannerImageUrl": "https://sprint-fe-project.s3.ap-northeast-2.amazonaws.com/globalnomad/activity_registration_image/a.png",
         *       "subImageUrls": [
         *         "https://sprint-fe-project.s3.ap-northeast-2.amazonaws.com/globalnomad/activity_registration_image/b.png"
         *       ]
         *     } */
        CreateActivityBodyDto: {
            title: string;
            category: string;
            description: string;
            /** Format: double */
            price: number;
            address: string;
            /** @default [] */
            schedules: components["schemas"]["CreateScheduleBody"][];
            bannerImageUrl: string;
            /** @default [] */
            subImageUrls: string[];
        };
        /** @enum {string} */
        ReservationStatus: "pending" | "confirmed" | "declined" | "canceled" | "completed";
        ReservationResponseDto: {
            /** Format: double */
            id: number;
            teamId: string;
            /** Format: double */
            userId: number;
            /** Format: double */
            activityId: number;
            /** Format: double */
            scheduleId: number;
            status: components["schemas"]["ReservationStatus"];
            reviewSubmitted: boolean;
            /** Format: double */
            totalPrice: number;
            /** Format: double */
            headCount: number;
            date: string;
            startTime: string;
            endTime: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        CreateReservationBodyDto: {
            /** Format: double */
            scheduleId: number;
            /** Format: double */
            headCount: number;
        };
        UserServiceReponseDto: {
            /** Format: double */
            id: number;
            email: string;
            nickname: string;
            profileImageUrl: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        LoginBodyDto: {
            email: string;
            password: string;
        };
        FindMyActivitiesQueryDto: {
            /** Format: double */
            cursorId?: number;
            /**
             * Format: double
             * @default 20
             */
            size: number;
        };
        /** @example {
         *       "date": "2024-01-09",
         *       "reservations": {
         *         "completed": 1,
         *         "confirmed": 0,
         *         "pending": 1
         *       }
         *     } */
        FindReservationsByMonthResponseDto: {
            date: string;
            reservations: {
                /** Format: double */
                pending: number;
                /** Format: double */
                confirmed: number;
                /** Format: double */
                completed: number;
            };
        };
        FindReservationsByMonthQueryDto: {
            /** @example 2024 */
            year: string;
            /** @example 01 */
            month: string;
        };
        ReservedScheduleResponseDto: {
            /** Format: double */
            scheduleId: number;
            startTime: string;
            endTime: string;
            count: {
                /** Format: double */
                declined: number;
                /** Format: double */
                confirmed: number;
                /** Format: double */
                pending: number;
            };
        };
        FindReservedScheduleQueryDto: {
            date: string;
        };
        /** @enum {string} */
        EnumsStatus: "pending" | "canceled" | "confirmed" | "declined";
        Status: components["schemas"]["EnumsStatus"];
        ReservationWithUserResponseDto: {
            /** Format: double */
            id: number;
            nickname: string;
            /** Format: double */
            userId: number;
            teamId: string;
            /** Format: double */
            activityId: number;
            /** Format: double */
            scheduleId: number;
            status: components["schemas"]["Status"];
            reviewSubmitted: boolean;
            /** Format: double */
            totalPrice: number;
            /** Format: double */
            headCount: number;
            date: string;
            startTime: string;
            endTime: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        FindReservationsQueryDto: {
            /** Format: double */
            cursorId?: number;
            /**
             * Format: double
             * @default 10
             */
            size: number;
            /** Format: double */
            scheduleId: number;
            /** @enum {string} */
            status: "declined" | "pending" | "confirmed";
        };
        UpdateMyActivityReservationBodyDto: {
            /** @enum {string} */
            status: "declined" | "confirmed";
        };
        UpdateMyActivityBodyDto: {
            title?: string;
            category?: components["schemas"]["Category"];
            description?: string;
            /** Format: double */
            price?: number;
            address?: string;
            bannerImageUrl?: string;
            /** @default [] */
            subImageIdsToRemove: number[];
            /** @default [] */
            subImageUrlsToAdd: string[];
            /** @default [] */
            scheduleIdsToRemove: number[];
            /** @default [] */
            schedulesToAdd: components["schemas"]["CreateScheduleBody"][];
        };
        NotificationDto: {
            /** Format: double */
            id: number;
            teamId: string;
            /** Format: double */
            userId: number;
            content: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            deletedAt: string | null;
        };
        FindMyNotificationsQueryDto: {
            /** Format: double */
            cursorId?: number;
            /**
             * Format: double
             * @default 10
             */
            size: number;
        };
        ReservationWithActivityResponseDto: {
            /** Format: double */
            id: number;
            teamId: string;
            /** Format: double */
            userId: number;
            activity: {
                bannerImageUrl: string;
                title: string;
                /** Format: double */
                id: number;
            };
            /** Format: double */
            scheduleId: number;
            status: components["schemas"]["ReservationStatus"];
            reviewSubmitted: boolean;
            /** Format: double */
            totalPrice: number;
            /** Format: double */
            headCount: number;
            date: string;
            startTime: string;
            endTime: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        FindMyReservationsQueryDto: {
            /** Format: double */
            cursorId?: number;
            /**
             * Format: double
             * @default 10
             */
            size: number;
            status?: components["schemas"]["ReservationStatus"];
        };
        UpdateMyReservationBodyDto: {
            /** @enum {string} */
            status: "canceled";
        };
        CreateReviewBodyDto: {
            /** Format: double */
            rating: number;
            content: string;
        };
        OauthApp: {
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            appKey: string;
            provider: string;
            teamId: string;
            /** Format: double */
            id: number;
        };
        /** @enum {string} */
        OauthProvider: "google" | "kakao";
        UpsertOauthAppRequestBody: {
            /** @description 간편 로그인을 위한 인증 키 입니다.
             *     Google 의 경우에는 "클라이언트 id" 입니다.
             *     Kakao 의 경우에는 "REST API 키" 입니다.
             *     실습을 위해 발급받은 키를 등록해주세요. 실제 서비스에서 사용 하는 키는 등록하시면 안됩니다. */
            appKey: string;
            provider: components["schemas"]["OauthProvider"];
        };
        /** @description 간편 로그인 과정을 통해 발급받은 토큰입니다.<br />
         *     Google 의 경우에는 <b>Google Id 토큰</b>(JWT) 입니다.<br/>
         *     Kakao 의 경우에는 <b>인가 코드</b> 입니다. */
        OauthToken: string;
        SignInWithOauthRequestBody: {
            /**
             * @description Kakao 의 경우에는 필수입니다.<br/>
             *     인가 코드를 얻을 때 사용하였던 redirect_uri 값을 그대로 사용합니다.
             * @example http://localhost:3000/oauth/kakao
             */
            redirectUri?: string;
            token: components["schemas"]["OauthToken"];
        };
        SignUpWithOauthRequestBody: {
            nickname: string;
        } & components["schemas"]["SignInWithOauthRequestBody"];
        CreateUserBodyDto: {
            email: string;
            nickname: string;
            password: string;
        };
        UpdateUserBodyDto: {
            nickname?: string;
            profileImageUrl?: string | null;
            newPassword?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
